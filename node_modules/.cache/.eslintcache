[{"C:\\Users\\seba9\\Desktop\\exercise\\src\\index.js":"1","C:\\Users\\seba9\\Desktop\\exercise\\src\\reportWebVitals.js":"2","C:\\Users\\seba9\\Desktop\\exercise\\src\\App.js":"3","C:\\Users\\seba9\\Desktop\\exercise\\src\\todo.js":"4","C:\\Users\\seba9\\Desktop\\exercise\\src\\edit.js":"5","C:\\Users\\seba9\\Desktop\\exercise\\src\\folder.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":478,"mtime":1639329906667,"results":"10","hashOfConfig":"8"},{"size":4077,"mtime":1639335330050,"results":"11","hashOfConfig":"8"},{"size":2198,"mtime":1639333811595,"results":"12","hashOfConfig":"8"},{"size":4064,"mtime":1639332272904,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k771lw",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\seba9\\Desktop\\exercise\\src\\index.js",[],"C:\\Users\\seba9\\Desktop\\exercise\\src\\reportWebVitals.js",[],"C:\\Users\\seba9\\Desktop\\exercise\\src\\App.js",[],"C:\\Users\\seba9\\Desktop\\exercise\\src\\todo.js",["27"],"import React, { useState, useEffect } from 'react'\r\nimport { useNavigate, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nconst ToDo = () => {\r\n\r\n    const id = parseInt(localStorage.getItem(\"id\"))\r\n    const params = useParams()\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const [toDo, setToDo] = useState(\"\");\r\n    const [list, setList] = useState([]);\r\n\r\n\r\n    const [status, setStatus] = useState(false)\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        addTask(toDo)\r\n        setToDo(\"\");\r\n        setStatus(false)\r\n    };\r\n\r\n    const handleOnChange = e => {\r\n        setToDo(e.target.value);\r\n    };\r\n\r\n\r\n    const addTask = async (task) => {\r\n        try {\r\n            var myHeaders = new Headers();\r\n            myHeaders.append(\"Content-Type\", \"application/json\");\r\n            var raw = JSON.stringify({\r\n                \"task\": task,\r\n                \"id_folder\": id\r\n            });\r\n\r\n            var requestOptions = {\r\n                method: 'POST',\r\n                headers: myHeaders,\r\n                body: raw,\r\n                redirect: 'follow'\r\n            };\r\n\r\n            const response = await fetch(\"http://127.0.0.1:5000/task/\", requestOptions);\r\n            if (response.status === 200) {\r\n                setStatus(true)\r\n\r\n            }\r\n        } catch (error) {\r\n            console.log(error, \"error\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try {\r\n                var requestOptions = {\r\n                    method: 'GET',\r\n                    redirect: 'follow'\r\n                };\r\n                const response = await fetch(\"http://127.0.0.1:5000/task/\", requestOptions);\r\n                const responseBody = await response.json();\r\n                setList(responseBody);\r\n                console.log(responseBody)\r\n            } catch (error) {\r\n                console.log(error, \"error\")\r\n            }\r\n        }\r\n        getData()\r\n    }, [status])\r\n\r\n    const goEdit = (id, task) => {\r\n        navigate('/edit', { state: { id: id, task: task, folder: params.name } });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card container w-25 mt-5 p-3\" >\r\n            <h1> <Link style={{textDecoration: \"none\", color: \"white\"}} to={\"/\"}><button style={{ background: \"none\", border: \"none\", fontWeight: \"bold\" }} >Folders</button></Link> {\">\"} {params.name} </h1>\r\n            <div>\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {list.map(item => {\r\n                        return (<>\r\n                            {id === item.id_folder\r\n                                ? (<li key={item.id} className=\"list-group-item d-flex\">\r\n                                    <div className=\"col-md-5\" >\r\n                                        <input type=\"checkbox\" name={item.id} id={item.id} />\r\n                                        <label className=\"ms-1\" htmlFor={item.id} > {item.task}</label>\r\n                                    </div>\r\n                                    <span className=\"col-md-3\">\r\n                                        <button style={{border: \"none\", background: \"none\", color : \"blue\"}} ><a onClick={() => { goEdit(item.id, item.task) }} >Edit</a></button>\r\n                                    </span>\r\n                                </li>)\r\n                                : null\r\n                            }\r\n                        </>\r\n                        );\r\n                    })}\r\n                </ul>\r\n                <form action=\"\" onSubmit={handleSubmit} className=\"d-flex mt-2\" >\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"New Task\"\r\n                        className=\"form-control\"\r\n                        value={toDo}\r\n                        onChange={handleOnChange}\r\n                    />\r\n                    <button type=\"submit\" className=\"btn btn-dark mx-3\" >Add</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDo\r\n","C:\\Users\\seba9\\Desktop\\exercise\\src\\edit.js",[],"C:\\Users\\seba9\\Desktop\\exercise\\src\\folder.js",[],{"ruleId":"28","severity":1,"message":"29","line":93,"column":111,"nodeType":"30","endLine":93,"endColumn":162},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]